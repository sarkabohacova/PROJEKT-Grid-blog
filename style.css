/* nejsme vcerejsi, pouzivame moderni box model */
html { box-sizing: border-box; }
*, :after, :before { box-sizing: inherit; }


body {
	margin: 0;
	padding: 30px;
	font-family:  'Alice', serif;
	font-size: 18px;
	line-height: 1.5;
}

h1, h2, h3 {
	font-family: 'Kaushan Script', cursive;
	font-weight: normal;
	margin: 0;
}

blockquote {
	font-family: 'Kaushan Script', cursive;
}

/* --------------------------------------------------- */

/* barvy */
:root {
	--light: #edf3f5;
	--grey: #b2bec3;
	--dark: #636e72;
	--orange: #ee5a24;
	--red: #ea2027;
	--yellow: #f79f1f;
	--green: #a3cb38;
	--lime: #c4e538;
}

/*
	Všimni si, jak jsou zde nadefinované barvy.
	Potřebný kód barvy si odtamtud můžeš vyzobnout a použít
	ve svém kódu, ale existuje i lepší způsob.

  CSS custom properties, někdy také označované jako CSS
	variables (CSS proměnné), je způsob, jak si	pojmenovat
	nějakou hodnotu a potom ji v kódu opakovaně používat.
	Často se používá právě pro barvy a další "nastavení".

	Když si chci nějakou hodnotu nadefinovat, použiji zápis
	--mujnazev: hodnota
	Když chci, abych mohl hodnotu používat všude v CSS,
	založím ji uvnitř selektoru :root, takže např.:
	:root {
		--mojebarva: #ff8800;
	}

	Chci-li potom dál v CSS hodnotu použít, stačí použít funkci var a v závorce název proměnné.Např.:
	.odstavec {
		color: var(--mojebarva);
	}

	Nemusím si tak pamatovat kódy barev nebo neustále v CSS jezdit nahoru a dolů, abych si je odněkud zkopíroval.

	Více o CSS custom properties:
	- https://www.w3schools.com/css/css3_variables.asp
	- https://css-tricks.com/patterns-for-practical-css-custom-properties-use/
	- https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/
*/


.blog {
	display: grid;
	grid-template-columns: [left-start] 1fr [left-end middle-start] 4fr [middle-end right-start] 2fr [right-end];
	column-gap: 40px;
}


h2 {
	grid-column: middle-start;
	font-size: 45px;
	margin-top: 30px;
	color: var(--green);
}

header {
	grid-column: middle-start;
}

p {
	grid-column: middle-start;
}

figure {
	grid-column: left-start / right-end;
	margin-left: 0;
	margin-right: 0;
}

figure img {
	width: 100%;
	object-fit: cover;
}

.tip-vlevo {
	grid-column: left-start;
	text-align: right;
	border-right: 2px solid var(--yellow);
}

.tip-vpravo {
	grid-column: right-start;
	border-left: 2px solid var(--yellow);
}

blockquote {
	grid-column: left-start / right-end;
	justify-self: center;
	font-size: 36px;
	color: var(--grey);
}

blockquote::before,
blockquote::after {
	content: "";
	display: block;
	width: 100px;
	height: 2px;
	background-color: var(--lime);
	margin: 15px 0 15px 250px;
}

.super::before,
.super::after {
	margin-left: 400px;
}

footer {
	grid-column: middle-start;
	font-size: 14px;
	color: var(--grey);
}

footer a {
	color: var(--grey);
}

h1 {
	font-size: 75px;
	color: var(--green);
	margin-bottom: 60px;
}

.meta {
	color: var(--grey);
	margin-bottom: 5px;
}

.tip {
	background-color: var(--light);
	justify-self: center;
	align-self: center;
	font-size: 16px;
	padding: 10px 15px;
	color: var(--dark);
}

.tip a {
	color: var(--orange);
}

.tip-vlevo img {
	height: 150px;
	width: 150px;
}

figcaption {
	color: var(--grey);
}











